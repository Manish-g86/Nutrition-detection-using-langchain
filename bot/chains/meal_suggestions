async def suggest_meal_with_restrictions(self, ctx) -> str:
      try:
          # Ask for dietary restrictions
          text = ctx.message.content
          profiles = load_profiles()
          user_profile = profiles.get(str(ctx.author.id))

          # Combine the user's input with their dietary restrictions
          user_input_with_restrictions = f"{text}. Dietary Restrictions: {user_profile}"

          # Set up the meal suggestion template with the user's input
          suggestion_prompt_template = PromptTemplate(
              input_variables=["text"],
              template="""You are a nutrition bot. The user may ask for meal suggestions such as 'suggest a breakfast,' 'suggest a lunch,' 'suggest a meal plan,' or 'suggest a food item.' Based on the input, provide one meal suggestion per interval (breakfast, lunch, dinner, or snack), ensuring the meals complement each other.

              When giving a meal plan, ensure the meals are balanced and work together throughout the day. For example, suggest meals that provide a variety of nutrients and flavors while considering any dietary restrictions (e.g., vegetarian, gluten-free, low-carb, etc.). If the user specifies a specific dietary need, adhere strictly to those restrictions in your meal suggestions.

              For full meal plans, the breakfast, lunch, and dinner should be complementary and support each other, providing variety in terms of food types and nutrients, while adhering to the specified dietary guidelines.

              Input: {text}
              """
          )
          # Use the LLMChain to generate the meal suggestion
          meal_suggestion_chain = LLMChain(llm=llm, prompt=suggestion_prompt_template)
          meal_suggestion = meal_suggestion_chain.run(user_input_with_restrictions)

          # Send meal suggestion to user
          await ctx.message.channel.send(meal_suggestion)

          # Ask for feedback and improvements
          await ctx.message.channel.send("How did you like the suggestion? Do you have any improvements or preferences you'd like me to consider?")

          # Wait for the user's feedback
          def check_feedback(message):
              return message.author == ctx.author and message.channel == ctx.message.channel

          feedback_message = await bot.wait_for('message', check=check_feedback)

          # Get the feedback from the user
          feedback = feedback_message.content

          # Process the feedback and update meal suggestion accordingly
          if 'improve' in feedback.lower() or 'change' in feedback.lower():
              updated_input = f"{user_input_with_restrictions} | User Feedback: {feedback}"

              # Re-run the suggestion chain with the feedback integrated
              updated_meal_suggestion = meal_suggestion_chain.run(updated_input)

              # Send the updated meal suggestion to the user
              await ctx.message.channel.send("Here is an updated meal suggestion based on your feedback:")
              await ctx.message.channel.send(updated_meal_suggestion)
          else:
              await ctx.message.channel.send("Glad you liked the suggestion! Let me know if you need anything else.")

      except Exception as e:
          await ctx.message.channel.send("Sorry, there was an error generating meal suggestions.")
